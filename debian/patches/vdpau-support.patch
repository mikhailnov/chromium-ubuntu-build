Taken from https://aur.archlinux.org/cgit/aur.git/tree/vdpau-support.patch?h=chromium-vaapi

diff --git a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
index 3772ad585..d4c8fabb8 100644
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
@@ -706,7 +706,8 @@ void VaapiVideoDecodeAccelerator::AssignPictureBuffers(
   // If we aren't in BufferAllocationMode::kNone, we have to allocate a
   // |vpp_vaapi_wrapper_| for VaapiPicture to DownloadFromSurface() the VA's
   // internal decoded frame.
-  if (buffer_allocation_mode_ != BufferAllocationMode::kNone) {
+  if (buffer_allocation_mode_ != BufferAllocationMode::kNone &&
+      buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau) {
     if (!vpp_vaapi_wrapper_) {
       vpp_vaapi_wrapper_ = VaapiWrapper::Create(
           VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -1218,6 +1219,12 @@ VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
     return BufferAllocationMode::kReduced;
   return BufferAllocationMode::kSuperReduced;
 #else
+  // NVIDIA blobs use VDPAU
+  if (VaapiWrapper::GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+    LOG(INFO) << "VA-API driver on VDPAU backend";
+    return BufferAllocationMode::kWrapVdpau;
+  }
+
   // TODO(crbug.com/912295): Enable a better BufferAllocationMode for IMPORT
   // |output_mode_| as well.
   if (output_mode_ == VideoDecodeAccelerator::Config::OutputMode::IMPORT)
@@ -1228,7 +1235,7 @@ VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
   // associated format reconciliation copy, avoiding all internal buffer
   // allocations.
   // TODO(crbug.com/911754): Enable for VP9 Profile 2.
-  if (IsGeminiLakeOrLater() &&
+  if (false && IsGeminiLakeOrLater() &&
       (profile_ == VP9PROFILE_PROFILE0 || profile_ == VP8PROFILE_ANY ||
        (profile_ >= H264PROFILE_MIN && profile_ <= H264PROFILE_MAX))) {
     // Add one to the reference frames for the one being currently egressed, and
diff --git a/media/gpu/vaapi/vaapi_video_decode_accelerator.h b/media/gpu/vaapi/vaapi_video_decode_accelerator.h
index 07ae2d85c..7a0d8c1fc 100644
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.h
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.h
@@ -217,6 +217,7 @@ class MEDIA_GPU_EXPORT VaapiVideoDecodeAccelerator
     // Using |client_|s provided PictureBuffers and as many internally
     // allocated.
     kNormal,
+    kWrapVdpau,
   };
 
   // Decides the concrete buffer allocation mode, depending on the hardware
diff --git a/media/gpu/vaapi/vaapi_wrapper.cc b/media/gpu/vaapi/vaapi_wrapper.cc
index bfd3700bf..fceb409b4 100644
--- a/media/gpu/vaapi/vaapi_wrapper.cc
+++ b/media/gpu/vaapi/vaapi_wrapper.cc
@@ -220,6 +220,9 @@ media::VAImplementation VendorStringToImplementationType(
   } else if (base::StartsWith(va_vendor_string, "Intel iHD driver",
                               base::CompareCase::SENSITIVE)) {
     return media::VAImplementation::kIntelIHD;
+  } else if (base::StartsWith(va_vendor_string, "Splitted-Desktop Systems VDPAU",
+                              base::CompareCase::SENSITIVE)) {
+    return media::VAImplementation::kNVIDIAVDPAU;
   }
   return media::VAImplementation::kOther;
 }
@@ -1710,6 +1713,11 @@ VaapiWrapper::ExportVASurfaceAsNativePixmapDmaBuf(
     return nullptr;
   }
 
+  if (GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+    LOG(ERROR) << "Disabled due to potential breakage.";
+    return nullptr;
+  }
+
   VADRMPRIMESurfaceDescriptor descriptor;
   {
     base::AutoLock auto_lock(*va_lock_);
@@ -2365,32 +2373,43 @@ bool VaapiWrapper::CreateSurfaces(unsigned int va_format,
   DCHECK(va_surfaces->empty());
 
   va_surfaces->resize(num_surfaces);
+
   VASurfaceAttrib attribute{};
-  attribute.type = VASurfaceAttribUsageHint;
-  attribute.flags = VA_SURFACE_ATTRIB_SETTABLE;
-  attribute.value.type = VAGenericValueTypeInteger;
-  switch (usage_hint) {
-    case SurfaceUsageHint::kVideoDecoder:
-      attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_DECODER;
-      break;
-    case SurfaceUsageHint::kVideoEncoder:
-      attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER;
-      break;
-    case SurfaceUsageHint::kVideoProcessWrite:
-      attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_VPP_WRITE;
-      break;
-    case SurfaceUsageHint::kGeneric:
-      attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_GENERIC;
-      break;
+  if (GetImplementationType() != VAImplementation::kNVIDIAVDPAU) {
+    // Nvidia's VAAPI-VDPAU driver doesn't support this attribute
+    attribute.type = VASurfaceAttribUsageHint;
+    attribute.flags = VA_SURFACE_ATTRIB_SETTABLE;
+    attribute.value.type = VAGenericValueTypeInteger;
+    switch (usage_hint) {
+      case SurfaceUsageHint::kVideoDecoder:
+        attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_DECODER;
+        break;
+      case SurfaceUsageHint::kVideoEncoder:
+        attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER;
+        break;
+      case SurfaceUsageHint::kVideoProcessWrite:
+        attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_VPP_WRITE;
+        break;
+      case SurfaceUsageHint::kGeneric:
+        attribute.value.value.i = VA_SURFACE_ATTRIB_USAGE_HINT_GENERIC;
+        break;
+    }
   }
 
   VAStatus va_res;
   {
     base::AutoLock auto_lock(*va_lock_);
-    va_res = vaCreateSurfaces(
-        va_display_, va_format, base::checked_cast<unsigned int>(size.width()),
-        base::checked_cast<unsigned int>(size.height()), va_surfaces->data(),
-        num_surfaces, &attribute, 1u);
+    if (GetImplementationType() == VAImplementation::kNVIDIAVDPAU) {
+      va_res = vaCreateSurfaces(
+          va_display_, va_format, base::checked_cast<unsigned int>(size.width()),
+          base::checked_cast<unsigned int>(size.height()), va_surfaces->data(),
+          num_surfaces, NULL, 0);
+    } else {
+      va_res = vaCreateSurfaces(
+          va_display_, va_format, base::checked_cast<unsigned int>(size.width()),
+          base::checked_cast<unsigned int>(size.height()), va_surfaces->data(),
+          num_surfaces, &attribute, 1u);
+    }
   }
   VA_LOG_ON_ERROR(va_res, VaapiFunctions::kVACreateSurfaces_Allocating);
   return va_res == VA_STATUS_SUCCESS;
diff --git a/media/gpu/vaapi/vaapi_wrapper.h b/media/gpu/vaapi/vaapi_wrapper.h
index 1871410e8..e4d5762f3 100644
--- a/media/gpu/vaapi/vaapi_wrapper.h
+++ b/media/gpu/vaapi/vaapi_wrapper.h
@@ -92,6 +92,7 @@ enum class VAImplementation {
   kIntelIHD,
   kOther,
   kInvalid,
+  kNVIDIAVDPAU,
 };
 
 // This class handles VA-API calls and ensures proper locking of VA-API calls
