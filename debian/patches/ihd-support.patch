diff --git a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
index d4c8fabb8..6f641b0bc 100644
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
@@ -707,7 +707,8 @@ void VaapiVideoDecodeAccelerator::AssignPictureBuffers(
   // |vpp_vaapi_wrapper_| for VaapiPicture to DownloadFromSurface() the VA's
   // internal decoded frame.
   if (buffer_allocation_mode_ != BufferAllocationMode::kNone &&
-      buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau) {
+      buffer_allocation_mode_ != BufferAllocationMode::kWrapVdpau &&
+      IsVppProfileSupported()) {
     if (!vpp_vaapi_wrapper_) {
       vpp_vaapi_wrapper_ = VaapiWrapper::Create(
           VaapiWrapper::kVideoProcess, VAProfileNone,
@@ -1203,6 +1204,11 @@ VaapiVideoDecodeAccelerator::GetSupportedProfiles(
   return profiles;
 }
 
+// static
+bool VaapiVideoDecodeAccelerator::IsVppProfileSupported() {
+  return VaapiWrapper::IsVppProfileSupported();
+}
+
 VaapiVideoDecodeAccelerator::BufferAllocationMode
 VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
 #if defined(USE_X11)
diff --git a/media/gpu/vaapi/vaapi_video_decode_accelerator.h b/media/gpu/vaapi/vaapi_video_decode_accelerator.h
index 7a0d8c1fc..a69a6ee74 100644
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.h
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.h
@@ -95,6 +95,8 @@ class MEDIA_GPU_EXPORT VaapiVideoDecodeAccelerator
   static VideoDecodeAccelerator::SupportedProfiles GetSupportedProfiles(
       const gpu::GpuDriverBugWorkarounds& workarounds);
 
+  static bool IsVppProfileSupported();
+
   // DecodeSurfaceHandler implementation.
   scoped_refptr<VASurface> CreateSurface() override;
   void SurfaceReady(scoped_refptr<VASurface> va_surface,
diff --git a/media/gpu/vaapi/vaapi_wrapper.cc b/media/gpu/vaapi/vaapi_wrapper.cc
index fceb409b4..ed71f7fa9 100644
--- a/media/gpu/vaapi/vaapi_wrapper.cc
+++ b/media/gpu/vaapi/vaapi_wrapper.cc
@@ -1451,6 +1451,12 @@ bool VaapiWrapper::GetJpegDecodeSuitableImageFourCC(unsigned int rt_format,
   return true;
 }
 
+// static
+bool VaapiWrapper::IsVppProfileSupported() {
+  return VASupportedProfiles::Get().IsProfileSupported(kVideoProcess,
+                                                    VAProfileNone);
+}
+
 // static
 bool VaapiWrapper::IsVppResolutionAllowed(const gfx::Size& size) {
   const VASupportedProfiles::ProfileInfo* profile_info =
diff --git a/media/gpu/vaapi/vaapi_wrapper.h b/media/gpu/vaapi/vaapi_wrapper.h
index e4d5762f3..66040c105 100644
--- a/media/gpu/vaapi/vaapi_wrapper.h
+++ b/media/gpu/vaapi/vaapi_wrapper.h
@@ -197,6 +197,9 @@ class MEDIA_GPU_EXPORT VaapiWrapper
                                                uint32_t preferred_fourcc,
                                                uint32_t* suitable_fourcc);
 
+  // Checks to see if VAProfileNone is supported on this decoder
+  static bool IsVppProfileSupported();
+
   // Checks the surface size is allowed for VPP. Returns true if the size is
   // supported, false otherwise.
   static bool IsVppResolutionAllowed(const gfx::Size& size);
